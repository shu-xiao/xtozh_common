#include <map>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include <TF1.h>
#include <TH1D.h>
#include <TH1F.h>
#include <TBox.h>
#include <TMath.h>
#include <TFile.h>
#include <TList.h>
#include <TChain.h>
#include <TCanvas.h>
#include <TBranch.h>
#include <TRandom.h>
#include <TProfile.h>
#include <TLorentzVector.h>
#include <TSystemDirectory.h>
#include "untuplizer.h"
#include "ElectronLooseID.C"


//Double_t fitFunc(Double_t*, Double_t*);
//void reconstructZPrime(TreeReader&, Double_t*, Double_t*);
void ElectronLooseID(TreeReader &, vector<Int_t> * 
                      );

//void ZPrimeMass(std::string inputFile){
void TTbarselect(){

//  TreeReader data(inputFile.data());
  TreeReader data("flattuple_12_1_pNo.root");

  // Declare the histogram of reconstructed mass

  TH1D* h_genParId = new TH1D("h_genParId", "gen particle ID",60 , -30,30 );
  TH1D* h_elePt = new TH1D("h_elePt", "reco Ele Pt no Cuts",20 , 0,200 );
  TH1D* h_muPt = new TH1D("h_muPt", "reco Mu Pt no Cuts",20 , 0,200 );
  TH1D* h_CA8jetPt = new TH1D("h_CA8jetPt", "reco Jet Pt no Cuts",50 , 0,500 );
  TH1D* h_pfMetCorrPt = new TH1D("h_pfMetCorrPt", "reco MET Pt no Cuts",40 , 0,400 );


  // begin of event loop
  
  for (Long64_t ev = 0; ev < data.GetEntriesFast(); ev++){


    if ( ev % 5000 == 0 )
      fprintf(stderr, "Processing event %lli of %lli\n", ev + 1, data.GetEntriesFast());

    data.GetEntry(ev);
    

    Int_t    nGenPar   = data.GetInt("nGenPar"); 
    Int_t*   genParId  = data.GetPtrInt("genParId");
    Int_t*   genParSt  = data.GetPtrInt("genParSt");
    Float_t* genParPt  = data.GetPtrFloat("genParPt");
    Float_t* genParEta = data.GetPtrFloat("genParEta");
    Float_t* genParPhi = data.GetPtrFloat("genParPhi");
    Float_t* genParM   = data.GetPtrFloat("genParM");

    Int_t    nEle      = data.GetInt("nEle");
    Float_t* elePt     = data.GetPtrFloat("elePt");

    Int_t    nMu       = data.GetInt("nMu");
    Float_t* muPt      = data.GetPtrFloat("muPt");

    Int_t    CA8nJet   = data.GetInt("CA8nJet");
    Float_t* CA8jetPt  = data.GetPtrFloat("CA8jetPt");

    Float_t  pfMetCorrPt  = data.GetFloat("pfMetCorrPt");
    

    //-----------------------------------------------------------------------------------//  test passElectronID

cout<<"ev:"<<ev<<endl;
vector<Int_t> test;

test.push_back(30);
test.push_back(20);
cout<<"before change "<<endl;
//cout<<"test(0):"<<test.at(0)<<endl;
//cout<<"test(1):"<<test.at(1)<<endl;
cout<<"test's size:"<<test.size()<<endl;

ElectronLooseID(data, &test );

cout<<"after change "<<endl;
cout<<"test's size:"<<test.size()<<endl;

    //-----------------------------------------------------------------------------------//

        for(int i=0 ;i<nGenPar ;i++){

          h_genParId->Fill(genParId[i]);}

    //-----------------------------------------------------------------------------------//

        for(int i=0 ;i<nEle ;i++){

          h_elePt->Fill(elePt[i]);}

    //-----------------------------------------------------------------------------------//

           for(int i=0 ;i<nMu ;i++){

          h_muPt->Fill(muPt[i]);}

    //-----------------------------------------------------------------------------------//

        for(int i=0 ;i<CA8nJet ;i++){

          h_CA8jetPt->Fill(CA8jetPt[i]);}

    //-----------------------------------------------------------------------------------//


          h_pfMetCorrPt->Fill(pfMetCorrPt);

    //-----------------------------------------------------------------------------------//


 
  } 

  // end of event loop

/*    TCanvas * c1 =new TCanvas("c1","",600,600);
    h_genParId->Draw();
    TCanvas * c2 =new TCanvas("c2","",600,600);
    h_elePt->Draw();
    TCanvas * c3 =new TCanvas("c3","",600,600);
    h_muPt->Draw();
    TCanvas * c4 =new TCanvas("c4","",600,600);
    h_CA8jetPt->Draw();
    TCanvas * c5 =new TCanvas("c5","",600,600);
    h_pfMetCorrPt->Draw();
*/

//    c1->Print("genParId.png");
//    c2->Print("elePt.png");
//    c3->Print("muPt.png");
//    c4->Print("CA8jetPt.png");
//    c5->Print("pfMetCorrPt.png");

  // Fitting the mass ratio
  
  
}

